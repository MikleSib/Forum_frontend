import React, { useState, useEffect } from 'react';
import {
  Container,
  Typography,
  Box,
  Tabs,
  Tab,
  Grid,
  Paper,
  Chip,
  Alert,
  CircularProgress,
  Dialog,
  DialogTitle,
  DialogContent,
  DialogActions,
  Button
} from '@mui/material';
import { styled } from '@mui/material/styles';
import { Badge, BadgeCategory, BadgeRarity, UserStats, UserLevel } from '../../shared/types/achievements.types';
import { achievementsApi, USER_LEVELS } from '../../services/achievementsApi';
import BadgeCard from './BadgeCard';
import UserStatsCard from './UserStatsCard';
import { userStore } from '../../shared/store/userStore';

interface TabPanelProps {
  children?: React.ReactNode;
  index: number;
  value: number;
}

function TabPanel(props: TabPanelProps) {
  const { children, value, index, ...other } = props;
  return (
    <div
      role="tabpanel"
      hidden={value !== index}
      id={`achievements-tabpanel-${index}`}
      aria-labelledby={`achievements-tab-${index}`}
      {...other}
    >
      {value === index && <Box sx={{ py: 3 }}>{children}</Box>}
    </div>
  );
}

const StyledTabs = styled(Tabs)(({ theme }) => ({
  '& .MuiTabs-indicator': {
    backgroundColor: theme.palette.primary.main,
    height: 3,
  },
  '& .MuiTab-root': {
    textTransform: 'none',
    fontWeight: 600,
    fontSize: '1rem',
    minHeight: 48,
    '&.Mui-selected': {
      color: theme.palette.primary.main,
    },
  },
}));

const AchievementNotification = styled(Dialog)(({ theme }) => ({
  '& .MuiDialog-paper': {
    textAlign: 'center',
    padding: theme.spacing(2),
    borderRadius: theme.spacing(2),
    maxWidth: 400,
  },
}));

const AchievementsPage: React.FC = () => {
  const [tabValue, setTabValue] = useState(0);
  
  // –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
  const [allBadges, setAllBadges] = useState<Badge[]>([]);
  const [userBadges, setUserBadges] = useState<Badge[]>([]);
  const [userStats, setUserStats] = useState<UserStats | null>(null);
  const [userLevel, setUserLevel] = useState<UserLevel | null>(null);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);
  
  // –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–æ–≤—ã—Ö –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è—Ö
  const [newAchievement, setNewAchievement] = useState<Badge | null>(null);
  const [showNotification, setShowNotification] = useState(false);

  // –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö
  useEffect(() => {
    const loadData = async () => {
      try {
        setLoading(true);
        
        // –ü–æ–ª—É—á–∞–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–≤ —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏)
        const userId = userStore.user?.id || 1;
        
        // –ó–∞–≥—Ä—É–∂–∞–µ–º –≤—Å–µ –±–µ–π–¥–∂–∏, –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ –±–µ–π–¥–∂–∏ –∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        const [badges, userBadgesData, statsData] = await Promise.all([
          achievementsApi.getBadges(),
          achievementsApi.getUserBadges(userId),
          achievementsApi.getUserStats(userId)
        ]);
        
        setAllBadges(badges);
        setUserBadges(userBadgesData);
        setUserStats(statsData);
        
        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —É—Ä–æ–≤–µ–Ω—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ —Å–ª–µ–¥—É—é—â–∏–π —É—Ä–æ–≤–µ–Ω—å
        const currentLevel = achievementsApi.getUserLevel(statsData.totalPoints);
        setUserLevel(currentLevel);
        
        setError(null);
      } catch (err) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π:', err);
        setError('–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π');
      } finally {
        setLoading(false);
      }
    };

    loadData();
  }, []);

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π
  const handleTabChange = (event: React.SyntheticEvent, newValue: number) => {
    setTabValue(newValue);
  };

  const closeNotification = () => {
    setShowNotification(false);
    setNewAchievement(null);
  };

  if (loading) {
    return (
      <Container maxWidth="lg" sx={{ py: 4, textAlign: 'center' }}>
        <CircularProgress size={60} />
        <Typography variant="h6" sx={{ mt: 2 }}>
          –ó–∞–≥—Ä—É–∑–∫–∞ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π...
        </Typography>
      </Container>
    );
  }

  if (error) {
    return (
      <Container maxWidth="lg" sx={{ py: 4 }}>
        <Alert severity="error">{error}</Alert>
      </Container>
    );
  }

  const nextLevel = userLevel && userLevel.level < USER_LEVELS.length 
    ? USER_LEVELS[userLevel.level] 
    : undefined;

  return (
    <Container maxWidth="lg" sx={{ py: 4 }}>
      <Typography variant="h1" component="h1" sx={{ 
        fontWeight: 700, 
        mb: 1, 
        fontSize: { xs: '1.75rem', md: '2.125rem' },
        textAlign: 'center'
      }}>
        üèÜ –î–æ—Å—Ç–∏–∂–µ–Ω–∏—è –∏ –±–µ–π–¥–∂–∏
      </Typography>
      
      <Typography variant="body1" color="text.secondary" sx={{ 
        textAlign: 'center', 
        mb: 4,
        maxWidth: '600px',
        mx: 'auto'
      }}>
        –£—á–∞—Å—Ç–≤—É–π—Ç–µ –≤ –∂–∏–∑–Ω–∏ —Å–æ–æ–±—â–µ—Å—Ç–≤–∞, –¥–µ–ª–∏—Ç–µ—Å—å –æ–ø—ã—Ç–æ–º –∏ –ø–æ–ª—É—á–∞–π—Ç–µ —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è!
      </Typography>

      {userStats && userLevel && (
        <UserStatsCard 
          stats={userStats} 
          userLevel={userLevel} 
          nextLevel={nextLevel}
        />
      )}

      <StyledTabs value={tabValue} onChange={handleTabChange} variant="fullWidth">
        <Tab label="–í—Å–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è" />
        <Tab label="–ú–æ–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è" />
        <Tab label="–ü—Ä–æ–≥—Ä–µ—Å—Å" />
      </StyledTabs>

      <TabPanel value={tabValue} index={0}>
        <Grid container spacing={3}>
          {allBadges.map(badge => {
            const isUnlocked = userBadges.some(ub => ub.id === badge.id);
            const userBadge = userBadges.find(ub => ub.id === badge.id);
            
            return (
              <Grid key={badge.id} size={{xs: 12, sm: 6, md: 4, lg: 3}}>
                <BadgeCard 
                  badge={userBadge || badge} 
                  isUnlocked={isUnlocked}
                  showProgress={!isUnlocked}
                />
              </Grid>
            );
          })}
        </Grid>

        {allBadges.length === 0 && (
          <Paper sx={{ p: 4, textAlign: 'center' }}>
            <Typography variant="h6" color="text.secondary">
              –ë–µ–π–¥–∂–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã
            </Typography>
          </Paper>
        )}
      </TabPanel>

      <TabPanel value={tabValue} index={1}>
        <Grid container spacing={3}>
          {userBadges.map(badge => (
            <Grid key={badge.id} size={{xs: 12, sm: 6, md: 4, lg: 3}}>
              <BadgeCard badge={badge} isUnlocked={true} />
            </Grid>
          ))}
        </Grid>

        {userBadges.length === 0 && (
          <Paper sx={{ p: 4, textAlign: 'center' }}>
            <Typography variant="h6" color="text.secondary">
              –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π
            </Typography>
            <Typography variant="body2" color="text.secondary">
              –£—á–∞—Å—Ç–≤—É–π—Ç–µ –≤ –∂–∏–∑–Ω–∏ —Ñ–æ—Ä—É–º–∞, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å —Å–≤–æ–∏ –ø–µ—Ä–≤—ã–µ –±–µ–π–¥–∂–∏!
            </Typography>
          </Paper>
        )}
      </TabPanel>

      <TabPanel value={tabValue} index={2}>
        <Typography variant="h6" sx={{ mb: 3 }}>
          –ü—Ä–æ–≥—Ä–µ—Å—Å –∫ –Ω–æ–≤—ã–º –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è–º
        </Typography>
        
        <Grid container spacing={3}>
          {allBadges
            .filter(badge => !userBadges.some(ub => ub.id === badge.id))
            .slice(0, 12) // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–µ 12 –¥–ª—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
            .map(badge => (
              <Grid key={badge.id} size={{xs: 12, sm: 6, md: 4, lg: 3}}>
                <BadgeCard 
                  badge={badge} 
                  isUnlocked={false}
                  showProgress={true}
                />
              </Grid>
            ))}
        </Grid>
      </TabPanel>

      {/* –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–æ–≤–æ–º –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–∏ */}
      <AchievementNotification 
        open={showNotification && !!newAchievement}
        onClose={closeNotification}
      >
        {newAchievement && (
          <>
            <DialogTitle sx={{ fontSize: '1.5rem', fontWeight: 'bold' }}>
              üéâ –ù–æ–≤–æ–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ!
            </DialogTitle>
            <DialogContent>
              <Box sx={{ fontSize: '4rem', mb: 2 }}>
                {newAchievement.icon}
              </Box>
              <Typography variant="h5" sx={{ fontWeight: 'bold', mb: 1 }}>
                {newAchievement.name}
              </Typography>
              <Typography variant="body1" color="text.secondary" sx={{ mb: 2 }}>
                {newAchievement.description}
              </Typography>
              <Chip 
                label={`+${newAchievement.points} –æ—á–∫–æ–≤`}
                color="primary"
                sx={{ fontWeight: 'bold' }}
              />
            </DialogContent>
            <DialogActions>
              <Button onClick={closeNotification} variant="contained">
                –û—Ç–ª–∏—á–Ω–æ!
              </Button>
            </DialogActions>
          </>
        )}
      </AchievementNotification>
    </Container>
  );
};

export default AchievementsPage; 