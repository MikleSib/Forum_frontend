import { Badge, BadgeCategory, BadgeRarity, UserStats, Achievement, UserLevel } from '../shared/types/achievements.types';

// –ü—Ä–µ–¥–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–µ –±–µ–π–¥–∂–∏
export const BADGES: Badge[] = [
  // –†—ã–±–æ–ª–æ–≤–Ω—ã–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è
  {
    id: 'first_catch',
    name: '–ü–µ—Ä–≤—ã–π —É–ª–æ–≤',
    description: '–ü–æ–π–º–∞–π—Ç–µ —Å–≤–æ—é –ø–µ—Ä–≤—É—é —Ä—ã–±—É –∏ –ø–æ–¥–µ–ª–∏—Ç–µ—Å—å —Ñ–æ—Ç–æ',
    icon: 'üé£',
    category: BadgeCategory.FISHING,
    rarity: BadgeRarity.COMMON,
    points: 50,
    color: '#4CAF50',
    requirements: [{ type: 'fish_caught', value: 1, operator: '>=' }]
  },
  {
    id: 'trophy_fish',
    name: '–¢—Ä–æ—Ñ–µ–π–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä',
    description: '–ü–æ–π–º–∞–π—Ç–µ —Ä—ã–±—É –≤–µ—Å–æ–º –±–æ–ª–µ–µ 5 –∫–≥',
    icon: 'üèÜ',
    category: BadgeCategory.FISHING,
    rarity: BadgeRarity.RARE,
    points: 200,
    color: '#FF9800',
    requirements: [{ type: 'fish_caught', value: 1, operator: '>=' }] // –í —Ä–µ–∞–ª—å–Ω–æ—Å—Ç–∏ –∑–¥–µ—Å—å –±—É–¥–µ—Ç –ø—Ä–æ–≤–µ—Ä–∫–∞ –≤–µ—Å–∞
  },
  {
    id: 'variety_hunter',
    name: '–û—Ö–æ—Ç–Ω–∏–∫ –∑–∞ —Ä–∞–∑–Ω–æ–æ–±—Ä–∞–∑–∏–µ–º',
    description: '–ü–æ–π–º–∞–π—Ç–µ 10 —Ä–∞–∑–Ω—ã—Ö –≤–∏–¥–æ–≤ —Ä—ã–±',
    icon: 'üêü',
    category: BadgeCategory.FISHING,
    rarity: BadgeRarity.UNCOMMON,
    points: 150,
    color: '#2196F3',
    requirements: [{ type: 'fish_caught', value: 10, operator: '>=' }]
  },
  {
    id: 'night_fisher',
    name: '–ù–æ—á–Ω–æ–π –æ—Ö–æ—Ç–Ω–∏–∫',
    description: '–ê–∫—Ç–∏–≤–Ω–∞—è —Ä—ã–±–∞–ª–∫–∞ –≤ –Ω–æ—á–Ω–æ–µ –≤—Ä–µ–º—è',
    icon: 'üåô',
    category: BadgeCategory.FISHING,
    rarity: BadgeRarity.UNCOMMON,
    points: 100,
    color: '#673AB7',
    requirements: [{ type: 'fish_caught', value: 5, operator: '>=' }]
  },

  // –§–æ—Ä—É–º–Ω—ã–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è
  {
    id: 'newcomer',
    name: '–ù–æ–≤–∏—á–æ–∫',
    description: '–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –Ω–∞ —Ñ–æ—Ä—É–º!',
    icon: 'üëã',
    category: BadgeCategory.FORUM,
    rarity: BadgeRarity.COMMON,
    points: 10,
    color: '#607D8B',
    requirements: [{ type: 'posts', value: 1, operator: '>=' }]
  },
  {
    id: 'chatterbox',
    name: '–ë–æ–ª—Ç—É–Ω',
    description: '–û—Å—Ç–∞–≤—å—Ç–µ 100 –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤',
    icon: 'üí¨',
    category: BadgeCategory.FORUM,
    rarity: BadgeRarity.UNCOMMON,
    points: 100,
    color: '#03A9F4',
    requirements: [{ type: 'comments', value: 100, operator: '>=' }]
  },
  {
    id: 'author',
    name: '–ê–≤—Ç–æ—Ä',
    description: '–°–æ–∑–¥–∞–π—Ç–µ 50 –ø–æ—Å—Ç–æ–≤',
    icon: '‚úçÔ∏è',
    category: BadgeCategory.FORUM,
    rarity: BadgeRarity.UNCOMMON,
    points: 200,
    color: '#FF5722',
    requirements: [{ type: 'posts', value: 50, operator: '>=' }]
  },
  {
    id: 'expert',
    name: '–≠–∫—Å–ø–µ—Ä—Ç',
    description: '–ü–æ–ª—É—á–∏—Ç–µ 1000 –ª–∞–π–∫–æ–≤',
    icon: '‚≠ê',
    category: BadgeCategory.FORUM,
    rarity: BadgeRarity.RARE,
    points: 500,
    color: '#FFC107',
    requirements: [{ type: 'likes', value: 1000, operator: '>=' }]
  },
  {
    id: 'forum_guru',
    name: '–ì—É—Ä—É —Ñ–æ—Ä—É–º–∞',
    description: '–ù–∞–±–µ—Ä–∏—Ç–µ 10000 –æ—á–∫–æ–≤ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏',
    icon: 'üßô‚Äç‚ôÇÔ∏è',
    category: BadgeCategory.FORUM,
    rarity: BadgeRarity.LEGENDARY,
    points: 1000,
    color: '#9C27B0',
    requirements: [{ type: 'posts', value: 100, operator: '>=' }, { type: 'comments', value: 500, operator: '>=' }]
  },

  // –°–æ—Ü–∏–∞–ª—å–Ω—ã–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è
  {
    id: 'mentor',
    name: '–ù–∞—Å—Ç–∞–≤–Ω–∏–∫',
    description: '–ü–æ–º–æ–≥–∏—Ç–µ 10 –Ω–æ–≤–∏—á–∫–∞–º',
    icon: 'üéì',
    category: BadgeCategory.SOCIAL,
    rarity: BadgeRarity.RARE,
    points: 300,
    color: '#4CAF50',
    requirements: [{ type: 'helped_users', value: 10, operator: '>=' }]
  },
  {
    id: 'popular',
    name: '–ü–æ–ø—É–ª—è—Ä–Ω—ã–π',
    description: '–ü–æ–ª—É—á–∏—Ç–µ 100 –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤',
    icon: 'üë•',
    category: BadgeCategory.SOCIAL,
    rarity: BadgeRarity.RARE,
    points: 400,
    color: '#E91E63',
    requirements: [{ type: 'followers', value: 100, operator: '>=' }]
  },
  {
    id: 'photographer',
    name: '–§–æ—Ç–æ–≥—Ä–∞—Ñ',
    description: '–ó–∞–≥—Ä—É–∑–∏—Ç–µ 50 —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π',
    icon: 'üì∏',
    category: BadgeCategory.SOCIAL,
    rarity: BadgeRarity.UNCOMMON,
    points: 150,
    color: '#795548',
    requirements: [{ type: 'photos', value: 50, operator: '>=' }]
  },

  // –ò—Å—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å
  {
    id: 'cartographer',
    name: '–ö–∞—Ä—Ç–æ–≥—Ä–∞—Ñ',
    description: '–î–æ–±–∞–≤—å—Ç–µ 10 —Ä—ã–±–Ω—ã—Ö –º–µ—Å—Ç –Ω–∞ –∫–∞—Ä—Ç—É',
    icon: 'üó∫Ô∏è',
    category: BadgeCategory.EXPLORER,
    rarity: BadgeRarity.UNCOMMON,
    points: 200,
    color: '#009688',
    requirements: [{ type: 'fishing_spots', value: 10, operator: '>=' }]
  },
  {
    id: 'traveler',
    name: '–ü—É—Ç–µ—à–µ—Å—Ç–≤–µ–Ω–Ω–∏–∫',
    description: '–ü–æ—Å–µ—Ç–∏—Ç–µ 20 —Ä–∞–∑–Ω—ã—Ö –≤–æ–¥–æ–µ–º–æ–≤',
    icon: 'üß≠',
    category: BadgeCategory.EXPLORER,
    rarity: BadgeRarity.RARE,
    points: 350,
    color: '#8BC34A',
    requirements: [{ type: 'fishing_spots', value: 20, operator: '>=' }]
  },
  {
    id: 'pioneer',
    name: '–ü–µ—Ä–≤–æ–æ—Ç–∫—Ä—ã–≤–∞—Ç–µ–ª—å',
    description: '–ü–µ—Ä–≤—ã–º –¥–æ–±–∞–≤—å—Ç–µ –Ω–æ–≤–æ–µ —Ä—ã–±–Ω–æ–µ –º–µ—Å—Ç–æ',
    icon: 'üîç',
    category: BadgeCategory.EXPLORER,
    rarity: BadgeRarity.EPIC,
    points: 500,
    color: '#FF6F00',
    requirements: [{ type: 'fishing_spots', value: 1, operator: '>=' }]
  }
];

// –£—Ä–æ–≤–Ω–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
export const USER_LEVELS: UserLevel[] = [
  { level: 1, title: '–ù–æ–≤–∏—á–æ–∫', minPoints: 0, maxPoints: 99, color: '#9E9E9E', perks: ['–ë–∞–∑–æ–≤—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ —Ñ–æ—Ä—É–º–∞'] },
  { level: 2, title: '–†—ã–±–∞–∫', minPoints: 100, maxPoints: 299, color: '#4CAF50', perks: ['–°–æ–∑–¥–∞–Ω–∏–µ –ø–æ—Å—Ç–æ–≤', '–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏'] },
  { level: 3, title: '–û–ø—ã—Ç–Ω—ã–π —Ä—ã–±–∞–∫', minPoints: 300, maxPoints: 699, color: '#2196F3', perks: ['–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ñ–æ—Ç–æ', '–ö–∞—Ä—Ç–∞ –º–µ—Å—Ç'] },
  { level: 4, title: '–ú–∞—Å—Ç–µ—Ä', minPoints: 700, maxPoints: 1499, color: '#FF9800', perks: ['–°–æ–∑–¥–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–π', '–ú–æ–¥–µ—Ä–∞—Ü–∏—è'] },
  { level: 5, title: '–≠–∫—Å–ø–µ—Ä—Ç', minPoints: 1500, maxPoints: 2999, color: '#9C27B0', perks: ['–ù–∞—Å—Ç–∞–≤–Ω–∏—á–µ—Å—Ç–≤–æ', '–û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è –≤—Å—Ç—Ä–µ—á'] },
  { level: 6, title: '–ì—É—Ä—É —Ä—ã–±–∞–ª–∫–∏', minPoints: 3000, maxPoints: 9999, color: '#F44336', perks: ['VIP —Å—Ç–∞—Ç—É—Å', '–≠–∫—Å–∫–ª—é–∑–∏–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏'] },
  { level: 7, title: '–õ–µ–≥–µ–Ω–¥–∞', minPoints: 10000, maxPoints: Infinity, color: '#FFD700', perks: ['–í—Å–µ –ø—Ä–∏–≤–∏–ª–µ–≥–∏–∏', '–ó–æ–ª–æ—Ç–æ–π –±–µ–π–¥–∂'] }
];

class AchievementsService {
  // –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –±–µ–π–¥–∂–∏
  getBadges(): Badge[] {
    return BADGES;
  }

  // –ü–æ–ª—É—á–∏—Ç—å –±–µ–π–¥–∂–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  getUserBadges(userId: number): Promise<Badge[]> {
    // –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –∑–¥–µ—Å—å –±—É–¥–µ—Ç API –∑–∞–ø—Ä–æ—Å
    const userBadges = this.getMockUserBadges(userId);
    return Promise.resolve(userBadges);
  }

  // –ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  getUserStats(userId: number): Promise<UserStats> {
    // –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –∑–¥–µ—Å—å –±—É–¥–µ—Ç API –∑–∞–ø—Ä–æ—Å
    const stats = this.getMockUserStats(userId);
    return Promise.resolve(stats);
  }

  // –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ã–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è
  checkAchievements(userId: number, userStats: UserStats): Promise<Badge[]> {
    const availableBadges = BADGES.filter(badge => {
      return badge.requirements.every(req => {
        const userValue = userStats[req.type as keyof UserStats] as number;
        switch (req.operator) {
          case '>=': return userValue >= req.value;
          case '>': return userValue > req.value;
          case '=': return userValue === req.value;
          case '<': return userValue < req.value;
          case '<=': return userValue <= req.value;
          default: return false;
        }
      });
    });

    return Promise.resolve(availableBadges);
  }

  // –ü–æ–ª—É—á–∏—Ç—å —É—Ä–æ–≤–µ–Ω—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  getUserLevel(points: number): UserLevel {
    return USER_LEVELS.find(level => 
      points >= level.minPoints && points <= level.maxPoints
    ) || USER_LEVELS[0];
  }

  // –î–æ–±–∞–≤–∏—Ç—å –æ—á–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
  addUserPoints(userId: number, points: number, reason: string): Promise<void> {
    console.log(`User ${userId} –ø–æ–ª—É—á–∏–ª ${points} –æ—á–∫–æ–≤ –∑–∞: ${reason}`);
    return Promise.resolve();
  }

  // –ú–æ–∫–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
  private getMockUserBadges(userId: number): Badge[] {
    const userBadges = BADGES.slice(0, 3).map(badge => ({
      ...badge,
      unlockedAt: new Date(),
      progress: badge.requirements[0]?.value || 0,
      maxProgress: badge.requirements[0]?.value || 0
    }));
    return userBadges;
  }

  private getMockUserStats(userId: number): UserStats {
    const totalPoints = 450;
    const level = this.getUserLevel(totalPoints);
    const nextLevel = USER_LEVELS.find(l => l.level === level.level + 1);
    
    return {
      totalPosts: 25,
      totalComments: 150,
      totalLikes: 320,
      totalPhotos: 15,
      fishingSpots: 5,
      fishCaught: 12,
      daysActive: 45,
      followers: 23,
      helpedUsers: 3,
      level: level.level,
      totalPoints,
      currentLevelPoints: totalPoints - level.minPoints, // 450 - 300 = 150
      nextLevelPoints: nextLevel ? nextLevel.minPoints - level.minPoints : level.maxPoints - level.minPoints // 700 - 300 = 400
    };
  }
}

export const achievementsApi = new AchievementsService(); 